server.port=8282

spring.datasource.url=jdbc:postgresql://localhost:5433/apiservice
spring.datasource.username=postgres
spring.datasource.password=#skdlf12

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
# logging.level.org.hibernate.type.descriptor.sql=trace

spring.datasource.platform=postgresql
spring.datasource.schema=classpath:db/datasource/data-${platform}.sql

spring.jpa.properties.hibernate.default_schema=rest
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update, none)
# 보통 개발 때는 jpa를 사용하여, update 방식으로 쓰다가, 배포 할 때 쯤, test 파일로 깔끔한 스키마를 얻어서, schema.sql에 쿼리문을 넣어서 사용한다. 이 때는 validate 방식을 사용한다고한다.
# spring.jpa.hibernate.dll-auto를 validate로 정의해도 스프링 부트에서 자동적으로 schema.sql의 SQL문을 실행하기 때문에 자동적으로 테이블이 삭제되었다가 생성됩니다.

# spring.jpa.hibernate.dll-auto : create, create-drop, update, validate, none 옵션을 설정할 수 있습니다. 
#   create : JPA가 DB와 상호작용할 때 기존에 있던 스키마(테이블)을 삭제하고 새로 만드는 것을 뜻합니다.
#   create-drop : JPA 종료 시점에 기존에 있었던 테이블을 삭제합니다.
#   update : JPA에 의해 변경된 부분만 반영합니다.
#   validate : 엔티티와 테이블이 정상 매핑되어 있는지만 검증합니다.
#   none : 초기화 동작을 사용하지 않습니다.
# spring.jpa.generate-dll: spring.jpa.hibernate.dll-auto 옵션을 사용할 것인지를 결정하는 프로퍼티입니다. 기본적으로 false로 되어있기 때문에 JPA에 의한 데이터베이스 자동 초기화 기능을 사용하려면 true로 세팅해야합니다.
# spring.jpa.show-sql: JPA가 생성한 SQL문을 보여줄 지에 대한 여부를 알려주는 프로퍼티입니다.

spring.jpa.hibernate.ddl-auto=create

spring.flyway.enabled=true
spring.flyway.url=jdbc:postgresql://localhost:5433/apiservice
spring.flyway.user=postgres
spring.flyway.password=#skdlf12
spring.flyway.schemas=rest
spring.flyway.outOfOrder=true